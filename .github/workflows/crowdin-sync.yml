name: Crowdin Synchronisation

permissions:
  contents: write
  pull-requests: write

on: workflow_call

env:
  # Setting 'is_push_a_crowdin_pr_merge' as env because of the readable multi-line support
  # Would like to define all other env vars here too, but env vars cannot include refs to other env vars :|
  is_push_a_crowdin_pr_merge: |
    ${{
      github.event_name == 'push'
      && (
        github.event.head_commit.message == 'chore: new translations from Crowdin')
        || (
          startsWith(github.event.head_commit.message, 'Merge pull request')
          && contains(github.event.head_commit.message, format('l10n_crowdin_{0}', github.ref_name))
        )
    }}

jobs:
  synchronize-with-crowdin:
    runs-on: ubuntu-latest

    steps:
      - name: Set vars
        # Define the rest of the env vars to make them reusable everywhere. GitHub actions expressions and variables are seriously confusing :|
        run: |
          echo "do_run_crowdin_upload=${{ (github.event_name == 'push' && ! fromJson(env.is_push_a_crowdin_pr_merge) ) || github.event_name == 'workflow_dispatch' }}" >> "$GITHUB_ENV"
          echo "do_run_crowdin_download=${{ github.event_name == 'schedule' || github.event_name == 'workflow_dispatch' }}" >> "$GITHUB_ENV"
      - name: Checkout
        uses: actions/checkout@v3
      - name: crowdin action
        uses: crowdin/github-action@v1
        with:
          upload_sources: ${{ fromJson(env.do_run_crowdin_upload) }}
          download_sources: ${{ fromJson(env.do_run_crowdin_download) }}
          upload_translations: ${{ fromJson(env.do_run_crowdin_upload) }}
          download_translations: ${{ fromJson(env.do_run_crowdin_download) }}
          create_pull_request: ${{ fromJson(env.do_run_crowdin_download) }}
          download_translations_args: "--skip-untranslated-files"
          pull_request_title: "New Crowdin Translations [${{ github.ref_name }}]"
          localization_branch_name: "l10n_crowdin_${{ github.ref_name }}"
          commit_message: "chore: new translations from Crowdin"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CROWDIN_PROJECT_ID: ${{ vars.CROWDIN_PROJECT_ID }}
          CROWDIN_API_TOKEN: ${{ secrets.CROWDIN_API_TOKEN }}
          CROWDIN_BASE_URL: ${{ vars.CROWDIN_BASE_URL }}
  backchannel-comments:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request_review_comment' && contains(github.event.pull_request.head.ref, 'l10n_crowdin') && (contains(github.event.comment.path, '.po') || contains(github.event.comment.path, '.properties')) }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Checkout crowdin-integration repo for common scripts
        uses: actions/checkout@v4
        with:
          clean: false
          repository: warp-ds/reusable-workflows
          path: temp-crowdin-integration
      - uses: actions/setup-node@v3
        with:
          node-version: 20
      - name: npm install
        run: |
          cd ${{ github.workspace }}/temp-crowdin-integration
          npm install
      - name: Run script
        run: |
          cd ${{ github.workspace }}/temp-crowdin-integration
          # The line below uses the Github API to fetch the raw contents of the file that was commented on
          # then we use awk to grab the line of the file that the comment was placed on to add as part
          # of the notification
          COMMENTED_ON=$(gh api -XGET --header Accept:application/vnd.github.v3.raw --raw-field ref=${{ github.event.pull_request.head.ref }} /repos/${{ github.event.pull_request.base.repo.full_name }}/contents/${{ github.event.comment.path }} | awk "NR==${{ github.event.comment.line }}")
          node scripts/backchannel-notification.js --body "${{ github.event.comment.body }}" --author "${{ github.event.comment.user.login }}" --path "${{ github.event.comment.path }}" --commented-on "$COMMENTED_ON" --pull-request-url "${{ github.event.comment.html_url }}"
        shell: bash
